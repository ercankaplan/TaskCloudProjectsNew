//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;
using System.ComponentModel.DataAnnotations;
using System.Reflection;
using System.Collections;
using System.Linq; 
using System.ComponentModel.DataAnnotations.Schema;
using System.Web.Script.Serialization;


namespace WSD.TaskCloud.Contracts.EF
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(PersonnelReference))]
    [KnownType(typeof(TaskPersonnel))]
    [KnownType(typeof(Users))]
    [KnownType(typeof(TaskRequest))]
    public partial class Task: BaseEntityType,IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Simple Properties
    
    	[Key] //Fix++ : need to know key fields
        [DataMember]
        public System.Guid TaskID
        {
            get { return _taskID; }
            set
            {
               
    			//Fix++ :check current value
    		    if (!((value != null) && (_taskID == value)))
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'TaskID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    //Fix++ : Property Validation
    				if (!isServerProcess)
    					if (!bIsCancelling)
    						if (this.ChangeTracker.State != ObjectState.Unchanged)
    							Validate(value, "TaskID"); 
    						else
    						{
    							if (IsJustInitialized)	
    								Validate(value, "TaskID"); 
    						}
                    _taskID = value;
    				IsJustInitialized = false;
                    OnPropertyChanged("TaskID");
                }
            }
        }
        private System.Guid _taskID;
    
        [DataMember]
        public Nullable<System.Guid> UpperTaskID
        {
            get { return _upperTaskID; }
            set
            {
               
    			//Fix++ :check current value
    		    if (!((value != null) && (_upperTaskID == value)))
                {
                    //Fix++ : Property Validation
    				if (!isServerProcess)
    					if (!bIsCancelling)
    						if (this.ChangeTracker.State != ObjectState.Unchanged)
    							Validate(value, "UpperTaskID"); 
    						else
    						{
    							if (IsJustInitialized)	
    								Validate(value, "UpperTaskID"); 
    						}
                    _upperTaskID = value;
    				IsJustInitialized = false;
                    OnPropertyChanged("UpperTaskID");
                }
            }
        }
        private Nullable<System.Guid> _upperTaskID;
    
        [DataMember]
        public string TaskNo
        {
            get { return _taskNo; }
            set
            {
               
    			//Fix++ :check current value
    		    if (!((value != null) && (_taskNo == value)))
                {
                    //Fix++ : Property Validation
    				if (!isServerProcess)
    					if (!bIsCancelling)
    						if (this.ChangeTracker.State != ObjectState.Unchanged)
    							Validate(value, "TaskNo"); 
    						else
    						{
    							if (IsJustInitialized)	
    								Validate(value, "TaskNo"); 
    						}
                    _taskNo = value;
    				IsJustInitialized = false;
                    OnPropertyChanged("TaskNo");
                }
            }
        }
        private string _taskNo;
    
        [DataMember]
        public string Subject
        {
            get { return _subject; }
            set
            {
               
    			//Fix++ :check current value
    		    if (!((value != null) && (_subject == value)))
                {
                    //Fix++ : Property Validation
    				if (!isServerProcess)
    					if (!bIsCancelling)
    						if (this.ChangeTracker.State != ObjectState.Unchanged)
    							Validate(value, "Subject"); 
    						else
    						{
    							if (IsJustInitialized)	
    								Validate(value, "Subject"); 
    						}
                    _subject = value;
    				IsJustInitialized = false;
                    OnPropertyChanged("Subject");
                }
            }
        }
        private string _subject;
    
        [DataMember]
        public string Summary
        {
            get { return _summary; }
            set
            {
               
    			//Fix++ :check current value
    		    if (!((value != null) && (_summary == value)))
                {
                    //Fix++ : Property Validation
    				if (!isServerProcess)
    					if (!bIsCancelling)
    						if (this.ChangeTracker.State != ObjectState.Unchanged)
    							Validate(value, "Summary"); 
    						else
    						{
    							if (IsJustInitialized)	
    								Validate(value, "Summary"); 
    						}
                    _summary = value;
    				IsJustInitialized = false;
                    OnPropertyChanged("Summary");
                }
            }
        }
        private string _summary;
    
        [DataMember]
        public string Description
        {
            get { return _description; }
            set
            {
               
    			//Fix++ :check current value
    		    if (!((value != null) && (_description == value)))
                {
                    //Fix++ : Property Validation
    				if (!isServerProcess)
    					if (!bIsCancelling)
    						if (this.ChangeTracker.State != ObjectState.Unchanged)
    							Validate(value, "Description"); 
    						else
    						{
    							if (IsJustInitialized)	
    								Validate(value, "Description"); 
    						}
                    _description = value;
    				IsJustInitialized = false;
                    OnPropertyChanged("Description");
                }
            }
        }
        private string _description;
    
        [DataMember]
        public Nullable<System.DateTime> StartDate
        {
            get { return _startDate; }
            set
            {
               
    			//Fix++ :check current value
    		    if (!((value != null) && (_startDate == value)))
                {
                    //Fix++ : Property Validation
    				if (!isServerProcess)
    					if (!bIsCancelling)
    						if (this.ChangeTracker.State != ObjectState.Unchanged)
    							Validate(value, "StartDate"); 
    						else
    						{
    							if (IsJustInitialized)	
    								Validate(value, "StartDate"); 
    						}
                    _startDate = value;
    				IsJustInitialized = false;
                    OnPropertyChanged("StartDate");
                }
            }
        }
        private Nullable<System.DateTime> _startDate;
    
        [DataMember]
        public Nullable<System.DateTime> Deadline
        {
            get { return _deadline; }
            set
            {
               
    			//Fix++ :check current value
    		    if (!((value != null) && (_deadline == value)))
                {
                    //Fix++ : Property Validation
    				if (!isServerProcess)
    					if (!bIsCancelling)
    						if (this.ChangeTracker.State != ObjectState.Unchanged)
    							Validate(value, "Deadline"); 
    						else
    						{
    							if (IsJustInitialized)	
    								Validate(value, "Deadline"); 
    						}
                    _deadline = value;
    				IsJustInitialized = false;
                    OnPropertyChanged("Deadline");
                }
            }
        }
        private Nullable<System.DateTime> _deadline;
    
        [DataMember]
        public Nullable<System.DateTime> FinishDate
        {
            get { return _finishDate; }
            set
            {
               
    			//Fix++ :check current value
    		    if (!((value != null) && (_finishDate == value)))
                {
                    //Fix++ : Property Validation
    				if (!isServerProcess)
    					if (!bIsCancelling)
    						if (this.ChangeTracker.State != ObjectState.Unchanged)
    							Validate(value, "FinishDate"); 
    						else
    						{
    							if (IsJustInitialized)	
    								Validate(value, "FinishDate"); 
    						}
                    _finishDate = value;
    				IsJustInitialized = false;
                    OnPropertyChanged("FinishDate");
                }
            }
        }
        private Nullable<System.DateTime> _finishDate;
    
        [DataMember]
        public byte TypeID
        {
            get { return _typeID; }
            set
            {
               
    			//Fix++ :check current value
    		    if (!((value != null) && (_typeID == value)))
                {
                    //Fix++ : Property Validation
    				if (!isServerProcess)
    					if (!bIsCancelling)
    						if (this.ChangeTracker.State != ObjectState.Unchanged)
    							Validate(value, "TypeID"); 
    						else
    						{
    							if (IsJustInitialized)	
    								Validate(value, "TypeID"); 
    						}
                    _typeID = value;
    				IsJustInitialized = false;
                    OnPropertyChanged("TypeID");
                }
            }
        }
        private byte _typeID;
    
        [DataMember]
        public byte StateID
        {
            get { return _stateID; }
            set
            {
               
    			//Fix++ :check current value
    		    if (!((value != null) && (_stateID == value)))
                {
                    //Fix++ : Property Validation
    				if (!isServerProcess)
    					if (!bIsCancelling)
    						if (this.ChangeTracker.State != ObjectState.Unchanged)
    							Validate(value, "StateID"); 
    						else
    						{
    							if (IsJustInitialized)	
    								Validate(value, "StateID"); 
    						}
                    _stateID = value;
    				IsJustInitialized = false;
                    OnPropertyChanged("StateID");
                }
            }
        }
        private byte _stateID;
    
        [DataMember]
        public byte PrivacyID
        {
            get { return _privacyID; }
            set
            {
               
    			//Fix++ :check current value
    		    if (!((value != null) && (_privacyID == value)))
                {
                    //Fix++ : Property Validation
    				if (!isServerProcess)
    					if (!bIsCancelling)
    						if (this.ChangeTracker.State != ObjectState.Unchanged)
    							Validate(value, "PrivacyID"); 
    						else
    						{
    							if (IsJustInitialized)	
    								Validate(value, "PrivacyID"); 
    						}
                    _privacyID = value;
    				IsJustInitialized = false;
                    OnPropertyChanged("PrivacyID");
                }
            }
        }
        private byte _privacyID;
    
        [DataMember]
        public byte PriorityID
        {
            get { return _priorityID; }
            set
            {
               
    			//Fix++ :check current value
    		    if (!((value != null) && (_priorityID == value)))
                {
                    //Fix++ : Property Validation
    				if (!isServerProcess)
    					if (!bIsCancelling)
    						if (this.ChangeTracker.State != ObjectState.Unchanged)
    							Validate(value, "PriorityID"); 
    						else
    						{
    							if (IsJustInitialized)	
    								Validate(value, "PriorityID"); 
    						}
                    _priorityID = value;
    				IsJustInitialized = false;
                    OnPropertyChanged("PriorityID");
                }
            }
        }
        private byte _priorityID;
    
        [DataMember]
        public Nullable<byte> ResultID
        {
            get { return _resultID; }
            set
            {
               
    			//Fix++ :check current value
    		    if (!((value != null) && (_resultID == value)))
                {
                    //Fix++ : Property Validation
    				if (!isServerProcess)
    					if (!bIsCancelling)
    						if (this.ChangeTracker.State != ObjectState.Unchanged)
    							Validate(value, "ResultID"); 
    						else
    						{
    							if (IsJustInitialized)	
    								Validate(value, "ResultID"); 
    						}
                    _resultID = value;
    				IsJustInitialized = false;
                    OnPropertyChanged("ResultID");
                }
            }
        }
        private Nullable<byte> _resultID;
    
        [DataMember]
        public int UserRoleID
        {
            get { return _userRoleID; }
            set
            {
               
    			//Fix++ :check current value
    		    if (!((value != null) && (_userRoleID == value)))
                {
                    //Fix++ : Property Validation
    				if (!isServerProcess)
    					if (!bIsCancelling)
    						if (this.ChangeTracker.State != ObjectState.Unchanged)
    							Validate(value, "UserRoleID"); 
    						else
    						{
    							if (IsJustInitialized)	
    								Validate(value, "UserRoleID"); 
    						}
                    _userRoleID = value;
    				IsJustInitialized = false;
                    OnPropertyChanged("UserRoleID");
                }
            }
        }
        private int _userRoleID;
    
        [DataMember]
        public int UserID
        {
            get { return _userID; }
            set
            {
               
    			//Fix++ :check current value
    		    if (!((value != null) && (_userID == value)))
                {
                    ChangeTracker.RecordOriginalValue("UserID", _userID);
                    if (!IsDeserializing)
                    {
                        if (Users != null && Users.UserID != value)
                        {
                            Users = null;
                        }
                    }
                    //Fix++ : Property Validation
    				if (!isServerProcess)
    					if (!bIsCancelling)
    						if (this.ChangeTracker.State != ObjectState.Unchanged)
    							Validate(value, "UserID"); 
    						else
    						{
    							if (IsJustInitialized)	
    								Validate(value, "UserID"); 
    						}
                    _userID = value;
    				IsJustInitialized = false;
                    OnPropertyChanged("UserID");
                }
            }
        }
        private int _userID;
    
        [DataMember]
        public Nullable<int> ByID
        {
            get { return _byID; }
            set
            {
               
    			//Fix++ :check current value
    		    if (!((value != null) && (_byID == value)))
                {
                    //Fix++ : Property Validation
    				if (!isServerProcess)
    					if (!bIsCancelling)
    						if (this.ChangeTracker.State != ObjectState.Unchanged)
    							Validate(value, "ByID"); 
    						else
    						{
    							if (IsJustInitialized)	
    								Validate(value, "ByID"); 
    						}
                    _byID = value;
    				IsJustInitialized = false;
                    OnPropertyChanged("ByID");
                }
            }
        }
        private Nullable<int> _byID;
    
        [DataMember]
        public System.DateTime Optime
        {
            get { return _optime; }
            set
            {
               
    			//Fix++ :check current value
    		    if (!((value != null) && (_optime == value)))
                {
                    //Fix++ : Property Validation
    				if (!isServerProcess)
    					if (!bIsCancelling)
    						if (this.ChangeTracker.State != ObjectState.Unchanged)
    							Validate(value, "Optime"); 
    						else
    						{
    							if (IsJustInitialized)	
    								Validate(value, "Optime"); 
    						}
                    _optime = value;
    				IsJustInitialized = false;
                    OnPropertyChanged("Optime");
                }
            }
        }
        private System.DateTime _optime;

        #endregion

        #region Navigation Properties
        [ScriptIgnore] //Fix++ circular reference exception 
        [DataMember]
        public TrackableCollection<PersonnelReference> PersonnelReference
        {
            get
            {
                if (_personnelReference == null)
                {
                    _personnelReference = new TrackableCollection<PersonnelReference>();
                    _personnelReference.CollectionChanged += FixupPersonnelReference;
                }
                return _personnelReference;
            }
            set
            {
                if (!ReferenceEquals(_personnelReference, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_personnelReference != null)
                    {
                        _personnelReference.CollectionChanged -= FixupPersonnelReference;
                    }
                    _personnelReference = value;
                    if (_personnelReference != null)
                    {
                        _personnelReference.CollectionChanged += FixupPersonnelReference;
                    }
                    OnNavigationPropertyChanged("PersonnelReference");
                }
            }
        }
        private TrackableCollection<PersonnelReference> _personnelReference;
        [ScriptIgnore] //Fix++ circular reference exception 
        [DataMember]
        public TrackableCollection<TaskPersonnel> TaskPersonnel
        {
            get
            {
                if (_taskPersonnel == null)
                {
                    _taskPersonnel = new TrackableCollection<TaskPersonnel>();
                    _taskPersonnel.CollectionChanged += FixupTaskPersonnel;
                }
                return _taskPersonnel;
            }
            set
            {
                if (!ReferenceEquals(_taskPersonnel, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_taskPersonnel != null)
                    {
                        _taskPersonnel.CollectionChanged -= FixupTaskPersonnel;
                    }
                    _taskPersonnel = value;
                    if (_taskPersonnel != null)
                    {
                        _taskPersonnel.CollectionChanged += FixupTaskPersonnel;
                    }
                    OnNavigationPropertyChanged("TaskPersonnel");
                }
            }
        }
        private TrackableCollection<TaskPersonnel> _taskPersonnel;
        [ScriptIgnore] //Fix++ circular reference exception 
        [DataMember]
        public Users Users
        {
            get { return _users; }
            set
            {
                if (!ReferenceEquals(_users, value))
                {
                    var previousValue = _users;
                    _users = value;
                    FixupUsers(previousValue);
                    OnNavigationPropertyChanged("Users");
                }
            }
        }
        private Users _users;
        [ScriptIgnore] //Fix++ circular reference exception 
        [DataMember]
        public TrackableCollection<TaskRequest> TaskRequest
        {
            get
            {
                if (_taskRequest == null)
                {
                    _taskRequest = new TrackableCollection<TaskRequest>();
                    _taskRequest.CollectionChanged += FixupTaskRequest;
                }
                return _taskRequest;
            }
            set
            {
                if (!ReferenceEquals(_taskRequest, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_taskRequest != null)
                    {
                        _taskRequest.CollectionChanged -= FixupTaskRequest;
                    }
                    _taskRequest = value;
                    if (_taskRequest != null)
                    {
                        _taskRequest.CollectionChanged += FixupTaskRequest;
                    }
                    OnNavigationPropertyChanged("TaskRequest");
                }
            }
        }
        private TrackableCollection<TaskRequest> _taskRequest;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            PersonnelReference.Clear();
            TaskPersonnel.Clear();
            Users = null;
            TaskRequest.Clear();
        }

        #endregion

        #region Association Fixup
    
        private void FixupUsers(Users previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Task.Contains(this))
            {
                previousValue.Task.Remove(this);
            }
    
            if (Users != null)
            {
                Users.Task.Add(this);
    
                UserID = Users.UserID;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Users")
                    && (ChangeTracker.OriginalValues["Users"] == Users))
                {
                    ChangeTracker.OriginalValues.Remove("Users");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Users", previousValue);
                }
                if (Users != null && !Users.ChangeTracker.ChangeTrackingEnabled)
                {
                    Users.StartTracking();
                }
            }
        }
    
        private void FixupPersonnelReference(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (PersonnelReference item in e.NewItems)
                {
                    item.Task = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("PersonnelReference", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (PersonnelReference item in e.OldItems)
                {
                    if (ReferenceEquals(item.Task, this))
                    {
                        item.Task = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("PersonnelReference", item);
                    }
                }
            }
        }
    
        private void FixupTaskPersonnel(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (TaskPersonnel item in e.NewItems)
                {
                    item.Task = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("TaskPersonnel", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (TaskPersonnel item in e.OldItems)
                {
                    if (ReferenceEquals(item.Task, this))
                    {
                        item.Task = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("TaskPersonnel", item);
                    }
                }
            }
        }
    
        private void FixupTaskRequest(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (TaskRequest item in e.NewItems)
                {
                    item.Task = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("TaskRequest", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (TaskRequest item in e.OldItems)
                {
                    if (ReferenceEquals(item.Task, this))
                    {
                        item.Task = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("TaskRequest", item);
                    }
                }
            }
        }

        #endregion

    }
}
