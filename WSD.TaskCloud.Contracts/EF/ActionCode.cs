//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;
using System.ComponentModel.DataAnnotations;
using System.Reflection;
using System.Collections;
using System.Linq; 
using System.ComponentModel.DataAnnotations.Schema;
using System.Web.Script.Serialization;


namespace WSD.TaskCloud.Contracts.EF
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Permission))]
    public partial class ActionCode: BaseEntityType,IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Simple Properties
    
    	[Key] //Fix++ : need to know key fields
        [DataMember]
        public string ActionCode1
        {
            get { return _actionCode1; }
            set
            {
               
    			//Fix++ :check current value
    		    if (!((value != null) && (_actionCode1 == value)))
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'ActionCode1' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    //Fix++ : Property Validation
    				if (!isServerProcess)
    					if (!bIsCancelling)
    						if (this.ChangeTracker.State != ObjectState.Unchanged)
    							Validate(value, "ActionCode1"); 
    						else
    						{
    							if (IsJustInitialized)	
    								Validate(value, "ActionCode1"); 
    						}
                    _actionCode1 = value;
    				IsJustInitialized = false;
                    OnPropertyChanged("ActionCode1");
                }
            }
        }
        private string _actionCode1;
    
        [DataMember]
        public string UpperActionCode
        {
            get { return _upperActionCode; }
            set
            {
               
    			//Fix++ :check current value
    		    if (!((value != null) && (_upperActionCode == value)))
                {
                    //Fix++ : Property Validation
    				if (!isServerProcess)
    					if (!bIsCancelling)
    						if (this.ChangeTracker.State != ObjectState.Unchanged)
    							Validate(value, "UpperActionCode"); 
    						else
    						{
    							if (IsJustInitialized)	
    								Validate(value, "UpperActionCode"); 
    						}
                    _upperActionCode = value;
    				IsJustInitialized = false;
                    OnPropertyChanged("UpperActionCode");
                }
            }
        }
        private string _upperActionCode;
    
        [DataMember]
        public string DisplayName
        {
            get { return _displayName; }
            set
            {
               
    			//Fix++ :check current value
    		    if (!((value != null) && (_displayName == value)))
                {
                    //Fix++ : Property Validation
    				if (!isServerProcess)
    					if (!bIsCancelling)
    						if (this.ChangeTracker.State != ObjectState.Unchanged)
    							Validate(value, "DisplayName"); 
    						else
    						{
    							if (IsJustInitialized)	
    								Validate(value, "DisplayName"); 
    						}
                    _displayName = value;
    				IsJustInitialized = false;
                    OnPropertyChanged("DisplayName");
                }
            }
        }
        private string _displayName;
    
        [DataMember]
        public string Detail
        {
            get { return _detail; }
            set
            {
               
    			//Fix++ :check current value
    		    if (!((value != null) && (_detail == value)))
                {
                    //Fix++ : Property Validation
    				if (!isServerProcess)
    					if (!bIsCancelling)
    						if (this.ChangeTracker.State != ObjectState.Unchanged)
    							Validate(value, "Detail"); 
    						else
    						{
    							if (IsJustInitialized)	
    								Validate(value, "Detail"); 
    						}
                    _detail = value;
    				IsJustInitialized = false;
                    OnPropertyChanged("Detail");
                }
            }
        }
        private string _detail;
    
        [DataMember]
        public string Controller
        {
            get { return _controller; }
            set
            {
               
    			//Fix++ :check current value
    		    if (!((value != null) && (_controller == value)))
                {
                    //Fix++ : Property Validation
    				if (!isServerProcess)
    					if (!bIsCancelling)
    						if (this.ChangeTracker.State != ObjectState.Unchanged)
    							Validate(value, "Controller"); 
    						else
    						{
    							if (IsJustInitialized)	
    								Validate(value, "Controller"); 
    						}
                    _controller = value;
    				IsJustInitialized = false;
                    OnPropertyChanged("Controller");
                }
            }
        }
        private string _controller;
    
        [DataMember]
        public string ActionName
        {
            get { return _actionName; }
            set
            {
               
    			//Fix++ :check current value
    		    if (!((value != null) && (_actionName == value)))
                {
                    //Fix++ : Property Validation
    				if (!isServerProcess)
    					if (!bIsCancelling)
    						if (this.ChangeTracker.State != ObjectState.Unchanged)
    							Validate(value, "ActionName"); 
    						else
    						{
    							if (IsJustInitialized)	
    								Validate(value, "ActionName"); 
    						}
                    _actionName = value;
    				IsJustInitialized = false;
                    OnPropertyChanged("ActionName");
                }
            }
        }
        private string _actionName;
    
        [DataMember]
        public bool IsMenu
        {
            get { return _isMenu; }
            set
            {
               
    			//Fix++ :check current value
    		    if (!((value != null) && (_isMenu == value)))
                {
                    //Fix++ : Property Validation
    				if (!isServerProcess)
    					if (!bIsCancelling)
    						if (this.ChangeTracker.State != ObjectState.Unchanged)
    							Validate(value, "IsMenu"); 
    						else
    						{
    							if (IsJustInitialized)	
    								Validate(value, "IsMenu"); 
    						}
                    _isMenu = value;
    				IsJustInitialized = false;
                    OnPropertyChanged("IsMenu");
                }
            }
        }
        private bool _isMenu;

        #endregion

        #region Navigation Properties
        [ScriptIgnore] //Fix++ circular reference exception 
        [DataMember]
        public TrackableCollection<Permission> Permission
        {
            get
            {
                if (_permission == null)
                {
                    _permission = new TrackableCollection<Permission>();
                    _permission.CollectionChanged += FixupPermission;
                }
                return _permission;
            }
            set
            {
                if (!ReferenceEquals(_permission, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_permission != null)
                    {
                        _permission.CollectionChanged -= FixupPermission;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (Permission item in _permission)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _permission = value;
                    if (_permission != null)
                    {
                        _permission.CollectionChanged += FixupPermission;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (Permission item in _permission)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("Permission");
                }
            }
        }
        private TrackableCollection<Permission> _permission;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            Permission.Clear();
        }

        #endregion

        #region Association Fixup
    
        private void FixupPermission(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Permission item in e.NewItems)
                {
                    item.ActionCode1 = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Permission", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Permission item in e.OldItems)
                {
                    if (ReferenceEquals(item.ActionCode1, this))
                    {
                        item.ActionCode1 = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Permission", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }

        #endregion

    }
}
