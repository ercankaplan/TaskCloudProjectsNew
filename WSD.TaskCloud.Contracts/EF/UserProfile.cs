//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;
using System.ComponentModel.DataAnnotations;
using System.Reflection;
using System.Collections;
using System.Linq; 
using System.ComponentModel.DataAnnotations.Schema;
using System.Web.Script.Serialization;


namespace WSD.TaskCloud.Contracts.EF
{
    [DataContract(IsReference = true)]
    public partial class UserProfile: BaseEntityType,IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Simple Properties
    
    	[Key] //Fix++ : need to know key fields
        [DataMember]
        public int UserProfileID
        {
            get { return _userProfileID; }
            set
            {
               
    			//Fix++ :check current value
    		    if (!((value != null) && (_userProfileID == value)))
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'UserProfileID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    //Fix++ : Property Validation
    				if (!isServerProcess)
    					if (!bIsCancelling)
    						if (this.ChangeTracker.State != ObjectState.Unchanged)
    							Validate(value, "UserProfileID"); 
    						else
    						{
    							if (IsJustInitialized)	
    								Validate(value, "UserProfileID"); 
    						}
                    _userProfileID = value;
    				IsJustInitialized = false;
                    OnPropertyChanged("UserProfileID");
                }
            }
        }
        private int _userProfileID;
    
        [DataMember]
        public int UserID
        {
            get { return _userID; }
            set
            {
               
    			//Fix++ :check current value
    		    if (!((value != null) && (_userID == value)))
                {
                    //Fix++ : Property Validation
    				if (!isServerProcess)
    					if (!bIsCancelling)
    						if (this.ChangeTracker.State != ObjectState.Unchanged)
    							Validate(value, "UserID"); 
    						else
    						{
    							if (IsJustInitialized)	
    								Validate(value, "UserID"); 
    						}
                    _userID = value;
    				IsJustInitialized = false;
                    OnPropertyChanged("UserID");
                }
            }
        }
        private int _userID;
    
        [DataMember]
        public string RegistryNum
        {
            get { return _registryNum; }
            set
            {
               
    			//Fix++ :check current value
    		    if (!((value != null) && (_registryNum == value)))
                {
                    //Fix++ : Property Validation
    				if (!isServerProcess)
    					if (!bIsCancelling)
    						if (this.ChangeTracker.State != ObjectState.Unchanged)
    							Validate(value, "RegistryNum"); 
    						else
    						{
    							if (IsJustInitialized)	
    								Validate(value, "RegistryNum"); 
    						}
                    _registryNum = value;
    				IsJustInitialized = false;
                    OnPropertyChanged("RegistryNum");
                }
            }
        }
        private string _registryNum;
    
        [DataMember]
        public string FirstName
        {
            get { return _firstName; }
            set
            {
               
    			//Fix++ :check current value
    		    if (!((value != null) && (_firstName == value)))
                {
                    //Fix++ : Property Validation
    				if (!isServerProcess)
    					if (!bIsCancelling)
    						if (this.ChangeTracker.State != ObjectState.Unchanged)
    							Validate(value, "FirstName"); 
    						else
    						{
    							if (IsJustInitialized)	
    								Validate(value, "FirstName"); 
    						}
                    _firstName = value;
    				IsJustInitialized = false;
                    OnPropertyChanged("FirstName");
                }
            }
        }
        private string _firstName;
    
        [DataMember]
        public string LastName
        {
            get { return _lastName; }
            set
            {
               
    			//Fix++ :check current value
    		    if (!((value != null) && (_lastName == value)))
                {
                    //Fix++ : Property Validation
    				if (!isServerProcess)
    					if (!bIsCancelling)
    						if (this.ChangeTracker.State != ObjectState.Unchanged)
    							Validate(value, "LastName"); 
    						else
    						{
    							if (IsJustInitialized)	
    								Validate(value, "LastName"); 
    						}
                    _lastName = value;
    				IsJustInitialized = false;
                    OnPropertyChanged("LastName");
                }
            }
        }
        private string _lastName;
    
        [DataMember]
        public string Mobile
        {
            get { return _mobile; }
            set
            {
               
    			//Fix++ :check current value
    		    if (!((value != null) && (_mobile == value)))
                {
                    //Fix++ : Property Validation
    				if (!isServerProcess)
    					if (!bIsCancelling)
    						if (this.ChangeTracker.State != ObjectState.Unchanged)
    							Validate(value, "Mobile"); 
    						else
    						{
    							if (IsJustInitialized)	
    								Validate(value, "Mobile"); 
    						}
                    _mobile = value;
    				IsJustInitialized = false;
                    OnPropertyChanged("Mobile");
                }
            }
        }
        private string _mobile;
    
        [DataMember]
        public string Email
        {
            get { return _email; }
            set
            {
               
    			//Fix++ :check current value
    		    if (!((value != null) && (_email == value)))
                {
                    //Fix++ : Property Validation
    				if (!isServerProcess)
    					if (!bIsCancelling)
    						if (this.ChangeTracker.State != ObjectState.Unchanged)
    							Validate(value, "Email"); 
    						else
    						{
    							if (IsJustInitialized)	
    								Validate(value, "Email"); 
    						}
                    _email = value;
    				IsJustInitialized = false;
                    OnPropertyChanged("Email");
                }
            }
        }
        private string _email;
    
        [DataMember]
        public string ImgUrl
        {
            get { return _imgUrl; }
            set
            {
               
    			//Fix++ :check current value
    		    if (!((value != null) && (_imgUrl == value)))
                {
                    //Fix++ : Property Validation
    				if (!isServerProcess)
    					if (!bIsCancelling)
    						if (this.ChangeTracker.State != ObjectState.Unchanged)
    							Validate(value, "ImgUrl"); 
    						else
    						{
    							if (IsJustInitialized)	
    								Validate(value, "ImgUrl"); 
    						}
                    _imgUrl = value;
    				IsJustInitialized = false;
                    OnPropertyChanged("ImgUrl");
                }
            }
        }
        private string _imgUrl;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
        }

        #endregion

    }
}
