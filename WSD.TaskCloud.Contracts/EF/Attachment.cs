//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;
using System.ComponentModel.DataAnnotations;
using System.Reflection;
using System.Collections;
using System.Linq; 
using System.ComponentModel.DataAnnotations.Schema;
using System.Web.Script.Serialization;


namespace WSD.TaskCloud.Contracts.EF
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(TaskResponseAttachment))]
    [KnownType(typeof(TaskAttachment))]
    public partial class Attachment: BaseEntityType,IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Simple Properties
    
    	[Key] //Fix++ : need to know key fields
        [DataMember]
        public System.Guid AttachmentID
        {
            get { return _attachmentID; }
            set
            {
               
    			//Fix++ :check current value
    		    if (!((value != null) && (_attachmentID == value)))
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'AttachmentID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    //Fix++ : Property Validation
    				if (!isServerProcess)
    					if (!bIsCancelling)
    						if (this.ChangeTracker.State != ObjectState.Unchanged)
    							Validate(value, "AttachmentID"); 
    						else
    						{
    							if (IsJustInitialized)	
    								Validate(value, "AttachmentID"); 
    						}
                    _attachmentID = value;
    				IsJustInitialized = false;
                    OnPropertyChanged("AttachmentID");
                }
            }
        }
        private System.Guid _attachmentID;
    
        [DataMember]
        public string Name
        {
            get { return _name; }
            set
            {
               
    			//Fix++ :check current value
    		    if (!((value != null) && (_name == value)))
                {
                    //Fix++ : Property Validation
    				if (!isServerProcess)
    					if (!bIsCancelling)
    						if (this.ChangeTracker.State != ObjectState.Unchanged)
    							Validate(value, "Name"); 
    						else
    						{
    							if (IsJustInitialized)	
    								Validate(value, "Name"); 
    						}
                    _name = value;
    				IsJustInitialized = false;
                    OnPropertyChanged("Name");
                }
            }
        }
        private string _name;
    
        [DataMember]
        public byte[] ContentData256K
        {
            get { return _contentData256K; }
            set
            {
               
    			//Fix++ :check current value
    		    if (!((value != null) && (_contentData256K == value)))
                {
                    //Fix++ : Property Validation
    				if (!isServerProcess)
    					if (!bIsCancelling)
    						if (this.ChangeTracker.State != ObjectState.Unchanged)
    							Validate(value, "ContentData256K"); 
    						else
    						{
    							if (IsJustInitialized)	
    								Validate(value, "ContentData256K"); 
    						}
                    _contentData256K = value;
    				IsJustInitialized = false;
                    OnPropertyChanged("ContentData256K");
                }
            }
        }
        private byte[] _contentData256K;
    
        [DataMember]
        public string FilePath
        {
            get { return _filePath; }
            set
            {
               
    			//Fix++ :check current value
    		    if (!((value != null) && (_filePath == value)))
                {
                    //Fix++ : Property Validation
    				if (!isServerProcess)
    					if (!bIsCancelling)
    						if (this.ChangeTracker.State != ObjectState.Unchanged)
    							Validate(value, "FilePath"); 
    						else
    						{
    							if (IsJustInitialized)	
    								Validate(value, "FilePath"); 
    						}
                    _filePath = value;
    				IsJustInitialized = false;
                    OnPropertyChanged("FilePath");
                }
            }
        }
        private string _filePath;
    
        [DataMember]
        public string Extend
        {
            get { return _extend; }
            set
            {
               
    			//Fix++ :check current value
    		    if (!((value != null) && (_extend == value)))
                {
                    //Fix++ : Property Validation
    				if (!isServerProcess)
    					if (!bIsCancelling)
    						if (this.ChangeTracker.State != ObjectState.Unchanged)
    							Validate(value, "Extend"); 
    						else
    						{
    							if (IsJustInitialized)	
    								Validate(value, "Extend"); 
    						}
                    _extend = value;
    				IsJustInitialized = false;
                    OnPropertyChanged("Extend");
                }
            }
        }
        private string _extend;
    
        [DataMember]
        public int UserRoleID
        {
            get { return _userRoleID; }
            set
            {
               
    			//Fix++ :check current value
    		    if (!((value != null) && (_userRoleID == value)))
                {
                    //Fix++ : Property Validation
    				if (!isServerProcess)
    					if (!bIsCancelling)
    						if (this.ChangeTracker.State != ObjectState.Unchanged)
    							Validate(value, "UserRoleID"); 
    						else
    						{
    							if (IsJustInitialized)	
    								Validate(value, "UserRoleID"); 
    						}
                    _userRoleID = value;
    				IsJustInitialized = false;
                    OnPropertyChanged("UserRoleID");
                }
            }
        }
        private int _userRoleID;
    
        [DataMember]
        public int UserID
        {
            get { return _userID; }
            set
            {
               
    			//Fix++ :check current value
    		    if (!((value != null) && (_userID == value)))
                {
                    //Fix++ : Property Validation
    				if (!isServerProcess)
    					if (!bIsCancelling)
    						if (this.ChangeTracker.State != ObjectState.Unchanged)
    							Validate(value, "UserID"); 
    						else
    						{
    							if (IsJustInitialized)	
    								Validate(value, "UserID"); 
    						}
                    _userID = value;
    				IsJustInitialized = false;
                    OnPropertyChanged("UserID");
                }
            }
        }
        private int _userID;
    
        [DataMember]
        public bool Visible
        {
            get { return _visible; }
            set
            {
               
    			//Fix++ :check current value
    		    if (!((value != null) && (_visible == value)))
                {
                    //Fix++ : Property Validation
    				if (!isServerProcess)
    					if (!bIsCancelling)
    						if (this.ChangeTracker.State != ObjectState.Unchanged)
    							Validate(value, "Visible"); 
    						else
    						{
    							if (IsJustInitialized)	
    								Validate(value, "Visible"); 
    						}
                    _visible = value;
    				IsJustInitialized = false;
                    OnPropertyChanged("Visible");
                }
            }
        }
        private bool _visible;
    
        [DataMember]
        public System.DateTime Optime
        {
            get { return _optime; }
            set
            {
               
    			//Fix++ :check current value
    		    if (!((value != null) && (_optime == value)))
                {
                    //Fix++ : Property Validation
    				if (!isServerProcess)
    					if (!bIsCancelling)
    						if (this.ChangeTracker.State != ObjectState.Unchanged)
    							Validate(value, "Optime"); 
    						else
    						{
    							if (IsJustInitialized)	
    								Validate(value, "Optime"); 
    						}
                    _optime = value;
    				IsJustInitialized = false;
                    OnPropertyChanged("Optime");
                }
            }
        }
        private System.DateTime _optime;

        #endregion

        #region Navigation Properties
        [ScriptIgnore] //Fix++ circular reference exception 
        [DataMember]
        public TrackableCollection<TaskResponseAttachment> TaskResponseAttachment
        {
            get
            {
                if (_taskResponseAttachment == null)
                {
                    _taskResponseAttachment = new TrackableCollection<TaskResponseAttachment>();
                    _taskResponseAttachment.CollectionChanged += FixupTaskResponseAttachment;
                }
                return _taskResponseAttachment;
            }
            set
            {
                if (!ReferenceEquals(_taskResponseAttachment, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_taskResponseAttachment != null)
                    {
                        _taskResponseAttachment.CollectionChanged -= FixupTaskResponseAttachment;
                    }
                    _taskResponseAttachment = value;
                    if (_taskResponseAttachment != null)
                    {
                        _taskResponseAttachment.CollectionChanged += FixupTaskResponseAttachment;
                    }
                    OnNavigationPropertyChanged("TaskResponseAttachment");
                }
            }
        }
        private TrackableCollection<TaskResponseAttachment> _taskResponseAttachment;
        [ScriptIgnore] //Fix++ circular reference exception 
        [DataMember]
        public TrackableCollection<TaskAttachment> TaskAttachment
        {
            get
            {
                if (_taskAttachment == null)
                {
                    _taskAttachment = new TrackableCollection<TaskAttachment>();
                    _taskAttachment.CollectionChanged += FixupTaskAttachment;
                }
                return _taskAttachment;
            }
            set
            {
                if (!ReferenceEquals(_taskAttachment, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_taskAttachment != null)
                    {
                        _taskAttachment.CollectionChanged -= FixupTaskAttachment;
                    }
                    _taskAttachment = value;
                    if (_taskAttachment != null)
                    {
                        _taskAttachment.CollectionChanged += FixupTaskAttachment;
                    }
                    OnNavigationPropertyChanged("TaskAttachment");
                }
            }
        }
        private TrackableCollection<TaskAttachment> _taskAttachment;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            TaskResponseAttachment.Clear();
            TaskAttachment.Clear();
        }

        #endregion

        #region Association Fixup
    
        private void FixupTaskResponseAttachment(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (TaskResponseAttachment item in e.NewItems)
                {
                    item.Attachment = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("TaskResponseAttachment", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (TaskResponseAttachment item in e.OldItems)
                {
                    if (ReferenceEquals(item.Attachment, this))
                    {
                        item.Attachment = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("TaskResponseAttachment", item);
                    }
                }
            }
        }
    
        private void FixupTaskAttachment(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (TaskAttachment item in e.NewItems)
                {
                    item.Attachment = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("TaskAttachment", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (TaskAttachment item in e.OldItems)
                {
                    if (ReferenceEquals(item.Attachment, this))
                    {
                        item.Attachment = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("TaskAttachment", item);
                    }
                }
            }
        }

        #endregion

    }
}
