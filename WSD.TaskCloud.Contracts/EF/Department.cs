//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;
using System.ComponentModel.DataAnnotations;
using System.Reflection;
using System.Collections;
using System.Linq; 
using System.ComponentModel.DataAnnotations.Schema;
using System.Web.Script.Serialization;


namespace WSD.TaskCloud.Contracts.EF
{
    [DataContract(IsReference = true)]
    public partial class Department: BaseEntityType,IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Simple Properties
    
    	[Key] //Fix++ : need to know key fields
        [DataMember]
        public int DepartmentID
        {
            get { return _departmentID; }
            set
            {
               
    			//Fix++ :check current value
    		    if (!((value != null) && (_departmentID == value)))
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'DepartmentID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    //Fix++ : Property Validation
    				if (!isServerProcess)
    					if (!bIsCancelling)
    						if (this.ChangeTracker.State != ObjectState.Unchanged)
    							Validate(value, "DepartmentID"); 
    						else
    						{
    							if (IsJustInitialized)	
    								Validate(value, "DepartmentID"); 
    						}
                    _departmentID = value;
    				IsJustInitialized = false;
                    OnPropertyChanged("DepartmentID");
                }
            }
        }
        private int _departmentID;
    
        [DataMember]
        public Nullable<int> UpperDepartmentID
        {
            get { return _upperDepartmentID; }
            set
            {
               
    			//Fix++ :check current value
    		    if (!((value != null) && (_upperDepartmentID == value)))
                {
                    //Fix++ : Property Validation
    				if (!isServerProcess)
    					if (!bIsCancelling)
    						if (this.ChangeTracker.State != ObjectState.Unchanged)
    							Validate(value, "UpperDepartmentID"); 
    						else
    						{
    							if (IsJustInitialized)	
    								Validate(value, "UpperDepartmentID"); 
    						}
                    _upperDepartmentID = value;
    				IsJustInitialized = false;
                    OnPropertyChanged("UpperDepartmentID");
                }
            }
        }
        private Nullable<int> _upperDepartmentID;
    
        [DataMember]
        public string Name
        {
            get { return _name; }
            set
            {
               
    			//Fix++ :check current value
    		    if (!((value != null) && (_name == value)))
                {
                    //Fix++ : Property Validation
    				if (!isServerProcess)
    					if (!bIsCancelling)
    						if (this.ChangeTracker.State != ObjectState.Unchanged)
    							Validate(value, "Name"); 
    						else
    						{
    							if (IsJustInitialized)	
    								Validate(value, "Name"); 
    						}
                    _name = value;
    				IsJustInitialized = false;
                    OnPropertyChanged("Name");
                }
            }
        }
        private string _name;
    
        [DataMember]
        public string Phone1
        {
            get { return _phone1; }
            set
            {
               
    			//Fix++ :check current value
    		    if (!((value != null) && (_phone1 == value)))
                {
                    //Fix++ : Property Validation
    				if (!isServerProcess)
    					if (!bIsCancelling)
    						if (this.ChangeTracker.State != ObjectState.Unchanged)
    							Validate(value, "Phone1"); 
    						else
    						{
    							if (IsJustInitialized)	
    								Validate(value, "Phone1"); 
    						}
                    _phone1 = value;
    				IsJustInitialized = false;
                    OnPropertyChanged("Phone1");
                }
            }
        }
        private string _phone1;
    
        [DataMember]
        public string Phone2
        {
            get { return _phone2; }
            set
            {
               
    			//Fix++ :check current value
    		    if (!((value != null) && (_phone2 == value)))
                {
                    //Fix++ : Property Validation
    				if (!isServerProcess)
    					if (!bIsCancelling)
    						if (this.ChangeTracker.State != ObjectState.Unchanged)
    							Validate(value, "Phone2"); 
    						else
    						{
    							if (IsJustInitialized)	
    								Validate(value, "Phone2"); 
    						}
                    _phone2 = value;
    				IsJustInitialized = false;
                    OnPropertyChanged("Phone2");
                }
            }
        }
        private string _phone2;
    
        [DataMember]
        public string Fax
        {
            get { return _fax; }
            set
            {
               
    			//Fix++ :check current value
    		    if (!((value != null) && (_fax == value)))
                {
                    //Fix++ : Property Validation
    				if (!isServerProcess)
    					if (!bIsCancelling)
    						if (this.ChangeTracker.State != ObjectState.Unchanged)
    							Validate(value, "Fax"); 
    						else
    						{
    							if (IsJustInitialized)	
    								Validate(value, "Fax"); 
    						}
                    _fax = value;
    				IsJustInitialized = false;
                    OnPropertyChanged("Fax");
                }
            }
        }
        private string _fax;
    
        [DataMember]
        public string EMail
        {
            get { return _eMail; }
            set
            {
               
    			//Fix++ :check current value
    		    if (!((value != null) && (_eMail == value)))
                {
                    //Fix++ : Property Validation
    				if (!isServerProcess)
    					if (!bIsCancelling)
    						if (this.ChangeTracker.State != ObjectState.Unchanged)
    							Validate(value, "EMail"); 
    						else
    						{
    							if (IsJustInitialized)	
    								Validate(value, "EMail"); 
    						}
                    _eMail = value;
    				IsJustInitialized = false;
                    OnPropertyChanged("EMail");
                }
            }
        }
        private string _eMail;
    
        [DataMember]
        public string AddressText
        {
            get { return _addressText; }
            set
            {
               
    			//Fix++ :check current value
    		    if (!((value != null) && (_addressText == value)))
                {
                    //Fix++ : Property Validation
    				if (!isServerProcess)
    					if (!bIsCancelling)
    						if (this.ChangeTracker.State != ObjectState.Unchanged)
    							Validate(value, "AddressText"); 
    						else
    						{
    							if (IsJustInitialized)	
    								Validate(value, "AddressText"); 
    						}
                    _addressText = value;
    				IsJustInitialized = false;
                    OnPropertyChanged("AddressText");
                }
            }
        }
        private string _addressText;
    
        [DataMember]
        public Nullable<int> AddressID
        {
            get { return _addressID; }
            set
            {
               
    			//Fix++ :check current value
    		    if (!((value != null) && (_addressID == value)))
                {
                    //Fix++ : Property Validation
    				if (!isServerProcess)
    					if (!bIsCancelling)
    						if (this.ChangeTracker.State != ObjectState.Unchanged)
    							Validate(value, "AddressID"); 
    						else
    						{
    							if (IsJustInitialized)	
    								Validate(value, "AddressID"); 
    						}
                    _addressID = value;
    				IsJustInitialized = false;
                    OnPropertyChanged("AddressID");
                }
            }
        }
        private Nullable<int> _addressID;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
        }

        #endregion

    }
}
