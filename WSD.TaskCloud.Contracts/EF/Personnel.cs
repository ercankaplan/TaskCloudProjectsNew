//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;
using System.ComponentModel.DataAnnotations;
using System.Reflection;
using System.Collections;
using System.Linq; 
using System.ComponentModel.DataAnnotations.Schema;
using System.Web.Script.Serialization;


namespace WSD.TaskCloud.Contracts.EF
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(PersonnelReference))]
    [KnownType(typeof(TaskPersonnel))]
    public partial class Personnel: BaseEntityType,IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Simple Properties
    
    	[Key] //Fix++ : need to know key fields
        [DataMember]
        public int PersonnelID
        {
            get { return _personnelID; }
            set
            {
               
    			//Fix++ :check current value
    		    if (!((value != null) && (_personnelID == value)))
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'PersonnelID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    //Fix++ : Property Validation
    				if (!isServerProcess)
    					if (!bIsCancelling)
    						if (this.ChangeTracker.State != ObjectState.Unchanged)
    							Validate(value, "PersonnelID"); 
    						else
    						{
    							if (IsJustInitialized)	
    								Validate(value, "PersonnelID"); 
    						}
                    _personnelID = value;
    				IsJustInitialized = false;
                    OnPropertyChanged("PersonnelID");
                }
            }
        }
        private int _personnelID;
    
        [DataMember]
        public string FirstName
        {
            get { return _firstName; }
            set
            {
               
    			//Fix++ :check current value
    		    if (!((value != null) && (_firstName == value)))
                {
                    //Fix++ : Property Validation
    				if (!isServerProcess)
    					if (!bIsCancelling)
    						if (this.ChangeTracker.State != ObjectState.Unchanged)
    							Validate(value, "FirstName"); 
    						else
    						{
    							if (IsJustInitialized)	
    								Validate(value, "FirstName"); 
    						}
                    _firstName = value;
    				IsJustInitialized = false;
                    OnPropertyChanged("FirstName");
                }
            }
        }
        private string _firstName;
    
        [DataMember]
        public string LastName
        {
            get { return _lastName; }
            set
            {
               
    			//Fix++ :check current value
    		    if (!((value != null) && (_lastName == value)))
                {
                    //Fix++ : Property Validation
    				if (!isServerProcess)
    					if (!bIsCancelling)
    						if (this.ChangeTracker.State != ObjectState.Unchanged)
    							Validate(value, "LastName"); 
    						else
    						{
    							if (IsJustInitialized)	
    								Validate(value, "LastName"); 
    						}
                    _lastName = value;
    				IsJustInitialized = false;
                    OnPropertyChanged("LastName");
                }
            }
        }
        private string _lastName;
    
        [DataMember]
        public string ProfessionNumber
        {
            get { return _professionNumber; }
            set
            {
               
    			//Fix++ :check current value
    		    if (!((value != null) && (_professionNumber == value)))
                {
                    //Fix++ : Property Validation
    				if (!isServerProcess)
    					if (!bIsCancelling)
    						if (this.ChangeTracker.State != ObjectState.Unchanged)
    							Validate(value, "ProfessionNumber"); 
    						else
    						{
    							if (IsJustInitialized)	
    								Validate(value, "ProfessionNumber"); 
    						}
                    _professionNumber = value;
    				IsJustInitialized = false;
                    OnPropertyChanged("ProfessionNumber");
                }
            }
        }
        private string _professionNumber;
    
        [DataMember]
        public int DepartmentID
        {
            get { return _departmentID; }
            set
            {
               
    			//Fix++ :check current value
    		    if (!((value != null) && (_departmentID == value)))
                {
                    //Fix++ : Property Validation
    				if (!isServerProcess)
    					if (!bIsCancelling)
    						if (this.ChangeTracker.State != ObjectState.Unchanged)
    							Validate(value, "DepartmentID"); 
    						else
    						{
    							if (IsJustInitialized)	
    								Validate(value, "DepartmentID"); 
    						}
                    _departmentID = value;
    				IsJustInitialized = false;
                    OnPropertyChanged("DepartmentID");
                }
            }
        }
        private int _departmentID;
    
        [DataMember]
        public int TitleID
        {
            get { return _titleID; }
            set
            {
               
    			//Fix++ :check current value
    		    if (!((value != null) && (_titleID == value)))
                {
                    //Fix++ : Property Validation
    				if (!isServerProcess)
    					if (!bIsCancelling)
    						if (this.ChangeTracker.State != ObjectState.Unchanged)
    							Validate(value, "TitleID"); 
    						else
    						{
    							if (IsJustInitialized)	
    								Validate(value, "TitleID"); 
    						}
                    _titleID = value;
    				IsJustInitialized = false;
                    OnPropertyChanged("TitleID");
                }
            }
        }
        private int _titleID;
    
        [DataMember]
        public string Address
        {
            get { return _address; }
            set
            {
               
    			//Fix++ :check current value
    		    if (!((value != null) && (_address == value)))
                {
                    //Fix++ : Property Validation
    				if (!isServerProcess)
    					if (!bIsCancelling)
    						if (this.ChangeTracker.State != ObjectState.Unchanged)
    							Validate(value, "Address"); 
    						else
    						{
    							if (IsJustInitialized)	
    								Validate(value, "Address"); 
    						}
                    _address = value;
    				IsJustInitialized = false;
                    OnPropertyChanged("Address");
                }
            }
        }
        private string _address;
    
        [DataMember]
        public string Phone
        {
            get { return _phone; }
            set
            {
               
    			//Fix++ :check current value
    		    if (!((value != null) && (_phone == value)))
                {
                    //Fix++ : Property Validation
    				if (!isServerProcess)
    					if (!bIsCancelling)
    						if (this.ChangeTracker.State != ObjectState.Unchanged)
    							Validate(value, "Phone"); 
    						else
    						{
    							if (IsJustInitialized)	
    								Validate(value, "Phone"); 
    						}
                    _phone = value;
    				IsJustInitialized = false;
                    OnPropertyChanged("Phone");
                }
            }
        }
        private string _phone;
    
        [DataMember]
        public string Mobile
        {
            get { return _mobile; }
            set
            {
               
    			//Fix++ :check current value
    		    if (!((value != null) && (_mobile == value)))
                {
                    //Fix++ : Property Validation
    				if (!isServerProcess)
    					if (!bIsCancelling)
    						if (this.ChangeTracker.State != ObjectState.Unchanged)
    							Validate(value, "Mobile"); 
    						else
    						{
    							if (IsJustInitialized)	
    								Validate(value, "Mobile"); 
    						}
                    _mobile = value;
    				IsJustInitialized = false;
                    OnPropertyChanged("Mobile");
                }
            }
        }
        private string _mobile;
    
        [DataMember]
        public string Email
        {
            get { return _email; }
            set
            {
               
    			//Fix++ :check current value
    		    if (!((value != null) && (_email == value)))
                {
                    //Fix++ : Property Validation
    				if (!isServerProcess)
    					if (!bIsCancelling)
    						if (this.ChangeTracker.State != ObjectState.Unchanged)
    							Validate(value, "Email"); 
    						else
    						{
    							if (IsJustInitialized)	
    								Validate(value, "Email"); 
    						}
                    _email = value;
    				IsJustInitialized = false;
                    OnPropertyChanged("Email");
                }
            }
        }
        private string _email;

        #endregion

        #region Navigation Properties
        [ScriptIgnore] //Fix++ circular reference exception 
        [DataMember]
        public TrackableCollection<PersonnelReference> PersonnelReference
        {
            get
            {
                if (_personnelReference == null)
                {
                    _personnelReference = new TrackableCollection<PersonnelReference>();
                    _personnelReference.CollectionChanged += FixupPersonnelReference;
                }
                return _personnelReference;
            }
            set
            {
                if (!ReferenceEquals(_personnelReference, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_personnelReference != null)
                    {
                        _personnelReference.CollectionChanged -= FixupPersonnelReference;
                    }
                    _personnelReference = value;
                    if (_personnelReference != null)
                    {
                        _personnelReference.CollectionChanged += FixupPersonnelReference;
                    }
                    OnNavigationPropertyChanged("PersonnelReference");
                }
            }
        }
        private TrackableCollection<PersonnelReference> _personnelReference;
        [ScriptIgnore] //Fix++ circular reference exception 
        [DataMember]
        public TrackableCollection<TaskPersonnel> TaskPersonnel
        {
            get
            {
                if (_taskPersonnel == null)
                {
                    _taskPersonnel = new TrackableCollection<TaskPersonnel>();
                    _taskPersonnel.CollectionChanged += FixupTaskPersonnel;
                }
                return _taskPersonnel;
            }
            set
            {
                if (!ReferenceEquals(_taskPersonnel, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_taskPersonnel != null)
                    {
                        _taskPersonnel.CollectionChanged -= FixupTaskPersonnel;
                    }
                    _taskPersonnel = value;
                    if (_taskPersonnel != null)
                    {
                        _taskPersonnel.CollectionChanged += FixupTaskPersonnel;
                    }
                    OnNavigationPropertyChanged("TaskPersonnel");
                }
            }
        }
        private TrackableCollection<TaskPersonnel> _taskPersonnel;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            PersonnelReference.Clear();
            TaskPersonnel.Clear();
        }

        #endregion

        #region Association Fixup
    
        private void FixupPersonnelReference(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (PersonnelReference item in e.NewItems)
                {
                    item.Personnel = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("PersonnelReference", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (PersonnelReference item in e.OldItems)
                {
                    if (ReferenceEquals(item.Personnel, this))
                    {
                        item.Personnel = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("PersonnelReference", item);
                    }
                }
            }
        }
    
        private void FixupTaskPersonnel(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (TaskPersonnel item in e.NewItems)
                {
                    item.Personnel = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("TaskPersonnel", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (TaskPersonnel item in e.OldItems)
                {
                    if (ReferenceEquals(item.Personnel, this))
                    {
                        item.Personnel = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("TaskPersonnel", item);
                    }
                }
            }
        }

        #endregion

    }
}
