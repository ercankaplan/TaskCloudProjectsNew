//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;
using System.ComponentModel.DataAnnotations;
using System.Reflection;
using System.Collections;
using System.Linq; 
using System.ComponentModel.DataAnnotations.Schema;
using System.Web.Script.Serialization;


namespace WSD.TaskCloud.Contracts.EF
{
    [DataContract(IsReference = true)]
    public partial class UserRole: BaseEntityType,IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Simple Properties
    
    	[Key] //Fix++ : need to know key fields
        [DataMember]
        public int UserRoleID
        {
            get { return _userRoleID; }
            set
            {
               
    			//Fix++ :check current value
    		    if (!((value != null) && (_userRoleID == value)))
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'UserRoleID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    //Fix++ : Property Validation
    				if (!isServerProcess)
    					if (!bIsCancelling)
    						if (this.ChangeTracker.State != ObjectState.Unchanged)
    							Validate(value, "UserRoleID"); 
    						else
    						{
    							if (IsJustInitialized)	
    								Validate(value, "UserRoleID"); 
    						}
                    _userRoleID = value;
    				IsJustInitialized = false;
                    OnPropertyChanged("UserRoleID");
                }
            }
        }
        private int _userRoleID;
    
        [DataMember]
        public int UserID
        {
            get { return _userID; }
            set
            {
               
    			//Fix++ :check current value
    		    if (!((value != null) && (_userID == value)))
                {
                    //Fix++ : Property Validation
    				if (!isServerProcess)
    					if (!bIsCancelling)
    						if (this.ChangeTracker.State != ObjectState.Unchanged)
    							Validate(value, "UserID"); 
    						else
    						{
    							if (IsJustInitialized)	
    								Validate(value, "UserID"); 
    						}
                    _userID = value;
    				IsJustInitialized = false;
                    OnPropertyChanged("UserID");
                }
            }
        }
        private int _userID;
    
        [DataMember]
        public int DepartmentID
        {
            get { return _departmentID; }
            set
            {
               
    			//Fix++ :check current value
    		    if (!((value != null) && (_departmentID == value)))
                {
                    //Fix++ : Property Validation
    				if (!isServerProcess)
    					if (!bIsCancelling)
    						if (this.ChangeTracker.State != ObjectState.Unchanged)
    							Validate(value, "DepartmentID"); 
    						else
    						{
    							if (IsJustInitialized)	
    								Validate(value, "DepartmentID"); 
    						}
                    _departmentID = value;
    				IsJustInitialized = false;
                    OnPropertyChanged("DepartmentID");
                }
            }
        }
        private int _departmentID;
    
        [DataMember]
        public int RoleID
        {
            get { return _roleID; }
            set
            {
               
    			//Fix++ :check current value
    		    if (!((value != null) && (_roleID == value)))
                {
                    //Fix++ : Property Validation
    				if (!isServerProcess)
    					if (!bIsCancelling)
    						if (this.ChangeTracker.State != ObjectState.Unchanged)
    							Validate(value, "RoleID"); 
    						else
    						{
    							if (IsJustInitialized)	
    								Validate(value, "RoleID"); 
    						}
                    _roleID = value;
    				IsJustInitialized = false;
                    OnPropertyChanged("RoleID");
                }
            }
        }
        private int _roleID;
    
        [DataMember]
        public System.DateTime StartDate
        {
            get { return _startDate; }
            set
            {
               
    			//Fix++ :check current value
    		    if (!((value != null) && (_startDate == value)))
                {
                    //Fix++ : Property Validation
    				if (!isServerProcess)
    					if (!bIsCancelling)
    						if (this.ChangeTracker.State != ObjectState.Unchanged)
    							Validate(value, "StartDate"); 
    						else
    						{
    							if (IsJustInitialized)	
    								Validate(value, "StartDate"); 
    						}
                    _startDate = value;
    				IsJustInitialized = false;
                    OnPropertyChanged("StartDate");
                }
            }
        }
        private System.DateTime _startDate;
    
        [DataMember]
        public Nullable<System.DateTime> FinishDate
        {
            get { return _finishDate; }
            set
            {
               
    			//Fix++ :check current value
    		    if (!((value != null) && (_finishDate == value)))
                {
                    //Fix++ : Property Validation
    				if (!isServerProcess)
    					if (!bIsCancelling)
    						if (this.ChangeTracker.State != ObjectState.Unchanged)
    							Validate(value, "FinishDate"); 
    						else
    						{
    							if (IsJustInitialized)	
    								Validate(value, "FinishDate"); 
    						}
                    _finishDate = value;
    				IsJustInitialized = false;
                    OnPropertyChanged("FinishDate");
                }
            }
        }
        private Nullable<System.DateTime> _finishDate;
    
        [DataMember]
        public bool IsActive
        {
            get { return _isActive; }
            set
            {
               
    			//Fix++ :check current value
    		    if (!((value != null) && (_isActive == value)))
                {
                    //Fix++ : Property Validation
    				if (!isServerProcess)
    					if (!bIsCancelling)
    						if (this.ChangeTracker.State != ObjectState.Unchanged)
    							Validate(value, "IsActive"); 
    						else
    						{
    							if (IsJustInitialized)	
    								Validate(value, "IsActive"); 
    						}
                    _isActive = value;
    				IsJustInitialized = false;
                    OnPropertyChanged("IsActive");
                }
            }
        }
        private bool _isActive;
    
        [DataMember]
        public Nullable<int> ProxyUserID
        {
            get { return _proxyUserID; }
            set
            {
               
    			//Fix++ :check current value
    		    if (!((value != null) && (_proxyUserID == value)))
                {
                    //Fix++ : Property Validation
    				if (!isServerProcess)
    					if (!bIsCancelling)
    						if (this.ChangeTracker.State != ObjectState.Unchanged)
    							Validate(value, "ProxyUserID"); 
    						else
    						{
    							if (IsJustInitialized)	
    								Validate(value, "ProxyUserID"); 
    						}
                    _proxyUserID = value;
    				IsJustInitialized = false;
                    OnPropertyChanged("ProxyUserID");
                }
            }
        }
        private Nullable<int> _proxyUserID;
    
        [DataMember]
        public System.DateTime Optime
        {
            get { return _optime; }
            set
            {
               
    			//Fix++ :check current value
    		    if (!((value != null) && (_optime == value)))
                {
                    //Fix++ : Property Validation
    				if (!isServerProcess)
    					if (!bIsCancelling)
    						if (this.ChangeTracker.State != ObjectState.Unchanged)
    							Validate(value, "Optime"); 
    						else
    						{
    							if (IsJustInitialized)	
    								Validate(value, "Optime"); 
    						}
                    _optime = value;
    				IsJustInitialized = false;
                    OnPropertyChanged("Optime");
                }
            }
        }
        private System.DateTime _optime;
    
        [DataMember]
        public int OpUserID
        {
            get { return _opUserID; }
            set
            {
               
    			//Fix++ :check current value
    		    if (!((value != null) && (_opUserID == value)))
                {
                    //Fix++ : Property Validation
    				if (!isServerProcess)
    					if (!bIsCancelling)
    						if (this.ChangeTracker.State != ObjectState.Unchanged)
    							Validate(value, "OpUserID"); 
    						else
    						{
    							if (IsJustInitialized)	
    								Validate(value, "OpUserID"); 
    						}
                    _opUserID = value;
    				IsJustInitialized = false;
                    OnPropertyChanged("OpUserID");
                }
            }
        }
        private int _opUserID;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
        }

        #endregion

    }
}
